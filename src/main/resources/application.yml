server:
  port: 8084  # 포트

  servlet:
    context-path: /v1

  tomcat:
    accept-count: 100 # default: 100
    max-connections: 8192 # default: 8192
    threads:
      min-spare: 10 # default: 10
      max: 200  # default: 200
    accesslog:
      enabled: true
      directory: logs

---
logging:
  level:
    org:
      hibernate:
        type:
          descriptor:
            sql: trace  # sql argument 값 표시
---
spring:
  jpa:
    show-sql: true
    generate-ddl: true
    database: mysql
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        # use_sql_comments: true # sql 문에 정보 주석 달림
        # generate_statistics: true # 커넥션 정보 등 여러 정보
        # default_batch_fetch_size: 1000  # 부모 엔티티와 연관 관계에 있는 자식 엔티티 조회시 조건문을 in 절로 묶어서 부모키셋을 넘겨 한번에 조회. 그때 사용되는 키셋의 크기값.
                                        # Fetch 적용시 발생하는 페이징 문제도 동일하게 해결 (1:N 관계에서의 페이징 문제는 Join 으로 인해 1에 대한 페이징이 정상작동 하지 않기 때문)
                                        # 자식 엔티티를 List -> Set 으로 변경하면 MultipleBagFetchException 해결됨. 그로 default_batch_fetch_size 조절로 해결이 불필요.

  datasource:
    hikari:
      jdbc-url: jdbc:mysql://34.64.239.5:3306/db_test_jpa_1?useUnicode=true&&useSSL=false&validationQuery=select 1&serverTimezone=Asia/Seoul
      username: root
      password: skrwl4866!
      connection-init-sql: "SET NAMES 'utf8mb4'"  # 이모지 사용
      # [ pool size ]
      # CP Connection pool dead-lock 을 피하기 위한 pool sizing 필요.
      # pool size = Tn * (Cm - 1) + 1 (Tn: 전체 Worker Thread 개수, Cm: 하나의 Task 에서 동시에 필요한 Connection 수)
      # Connection 과 매핑되는 쓰레드수에 1을 더하여 해결. 그 한 개의 Connection 이 교착상태를 풀어주는 Key Connection 이 됨.
      # 성능을 고려한 pool size = Tn * (Cm - 1) + (Tn / 2)
      # maximum-pool-size: (default: 10)